cmake_minimum_required(VERSION 3.29)

# 设置C++标准
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# 禁用编译器检查
set(CMAKE_C_COMPILER_WORKS 1)
set(CMAKE_CXX_COMPILER_WORKS 1)

# 指定交叉编译工具链
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_C_COMPILER arm-none-eabi-gcc)
set(CMAKE_CXX_COMPILER arm-none-eabi-g++)
set(CMAKE_ASM_COMPILER arm-none-eabi-gcc)
set(CMAKE_AR arm-none-eabi-ar)
set(CMAKE_OBJCOPY arm-none-eabi-objcopy)
set(CMAKE_OBJDUMP arm-none-eabi-objdump)
set(SIZE arm-none-eabi-size)

# 编译选项
add_compile_options(-mcpu=cortex-m7 -mfpu=fpv5-d16 -mthumb -mfloat-abi=soft)
add_compile_options(-ffunction-sections -fdata-sections -fno-common -fmessage-length=0 -Wall)

# 设置项目
project(MyExecutable C ASM)
set(CMAKE_C_STANDARD 99)

# 设置项目根目录
set(ROOT_DIR ${CMAKE_SOURCE_DIR})

# 设置模块的目录
set(ADAPTER_DIR ${CMAKE_SOURCE_DIR}/src/adapter)
set(APP_DIR ${CMAKE_SOURCE_DIR}/src/app)
set(HAL_DIR ${CMAKE_SOURCE_DIR}/src/hal)
set(MIDDLEWARE_DIR ${CMAKE_SOURCE_DIR}/src/middleware)
set(VENDOR_DIR ${CMAKE_SOURCE_DIR}/vendor/PlatformA)

# 函数收集模块的头文件目录
function(collect_header_dir MODULE_NAME MODULE_DIR)
    if(EXISTS ${MODULE_DIR})
        file(GLOB_RECURSE HEADER_FILES "${MODULE_DIR}/*.h")
        set(RELATIVE_HEADER_FILES)
        foreach(file ${HEADER_FILES})
            get_filename_component(header_dir ${file} DIRECTORY)
            list(APPEND RELATIVE_HEADER_FILES ${header_dir})
        endforeach()
        list(REMOVE_DUPLICATES RELATIVE_HEADER_FILES)
        set(${MODULE_NAME}_HEADERS ${RELATIVE_HEADER_FILES} PARENT_SCOPE)
    else()
        message(WARNING "Directory ${MODULE_DIR} does not exist for module ${MODULE_NAME}")
    endif()
endfunction()

# 为每个模块收集头文件
collect_header_dir(ADAPTER ${ADAPTER_DIR})
collect_header_dir(APP ${APP_DIR})
collect_header_dir(HAL ${HAL_DIR})
collect_header_dir(MIDDLEWARE ${MIDDLEWARE_DIR})
collect_header_dir(VENDOR ${VENDOR_DIR})
# collect_header_dir(HAL_Driver ${HAL_Driver_DIR})

# 合并头文件列表
list(APPEND HEADERS_LIST ${ADAPTER_HEADERS} ${APP_HEADERS} ${HAL_HEADERS} ${MIDDLEWARE_HEADERS} ${VENDOR_HEADERS})
# message(STATUS ${HEADERS_LIST})
# 添加子目录
add_subdirectory(src)
add_subdirectory(vendor)

# 设置链接脚本和启动文件
set(LINK_SCRIPT ${CMAKE_SOURCE_DIR}/vendor/platformA/STM32H743IITx_FLASH.ld)

# 设置链接脚本和启动文件
set(STARTUP_SCRIPT ${CMAKE_SOURCE_DIR}/vendor/platformA/startup_stm32h743xx.s)

# 收集源文件
# file(GLOB_RECURSE app "${ROOT_DIR}/src/app/*.c" ${STARTUP_SCRIPT})


# 设置目标 ELF 文件
set(ELF_TARGET ${CMAKE_PROJECT_NAME})

# 创建可执行目标
add_executable(${CMAKE_PROJECT_NAME}
    $<TARGET_OBJECTS:hal_deriverLib>
    $<TARGET_OBJECTS:HalLib>
    $<TARGET_OBJECTS:AdapterLib>   
    $<TARGET_OBJECTS:AppLib>
)

# # 添加链接库
# target_link_libraries(${CMAKE_PROJECT_NAME} PUBLIC
#     ${hal_deriverLib}
#     ${HalLib}
#     ${AdapterLib}
# )

# 编译参数
target_compile_definitions(${CMAKE_PROJECT_NAME} PUBLIC 
    USE_HAL_DRIVER 
    -DSTM32H743xx
    $<$<CONFIG:Debug>:DEBUG>
)

# 链接参数
target_link_options(${CMAKE_PROJECT_NAME} PRIVATE
    -T${LINK_SCRIPT}
    ${CPU_FLAGS}
    --specs=nano.specs
    -Wl,--gc-sections
    -Wl,-Map=${CMAKE_PROJECT_NAME}.map
    -Wl,--cref
    -Wl,--print-memory-usage
)

# 包含头文件目录
target_include_directories(${CMAKE_PROJECT_NAME} PUBLIC
    ${HEADERS_LIST}
)

# 添加自定义命令，用于生成 hex 和 bin 文件
add_custom_command(TARGET ${ELF_TARGET} POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -O ihex ${ELF_TARGET} ${ELF_TARGET}.hex
    COMMAND ${CMAKE_OBJCOPY} -O binary -S ${ELF_TARGET} ${ELF_TARGET}.bin
)
